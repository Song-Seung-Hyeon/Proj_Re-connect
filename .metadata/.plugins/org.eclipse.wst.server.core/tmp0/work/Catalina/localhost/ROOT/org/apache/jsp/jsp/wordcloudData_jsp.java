/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-12-19 07:06:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;
import java.sql.*;
import java.io.*;
import javax.servlet.http.HttpSession;

public final class wordcloudData_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");

      out.write("\r\n");
      out.write("\r\n");

String userUID = (String) session.getAttribute("userUID");

//JDBC 드라이버 로드
Class.forName("com.mysql.jdbc.Driver");

//MySQL 데이터베이스 연결 정보
String url = "jdbc:mysql://192.168.0.71:3306/recycle";
String username = "recycle";
String password = "1234";

Connection conn = null;
PreparedStatement pstmt = null;
ResultSet resultSet = null;

try {
  conn = DriverManager.getConnection(url, username, password);
	String selectQuery = "SELECT ul.*, ud.*, " +
            "GROUP_CONCAT(DISTINCT h.hobby_name) AS hobbies, " +
            "GROUP_CONCAT(DISTINCT p.personality_name) AS personalities, " +
            "GROUP_CONCAT(DISTINCT mv.values_name) AS marriage_values " +
            "FROM user_list ul " +
            "LEFT JOIN user_detail ud ON ul.user_uid = ud.user_uid " +
            "LEFT JOIN user_hobbies uh ON ul.user_uid = uh.user_id " +
            "LEFT JOIN hobbies h ON uh.hobby_id = h.hobby_id " +
            "LEFT JOIN user_personality up ON ul.user_uid = up.user_id " +
            "LEFT JOIN personalities p ON up.personality_id = p.personality_id " +
            "LEFT JOIN user_marriage_values umv ON ul.user_uid = umv.user_id " +
            "LEFT JOIN marriage_values mv ON umv.values_id = mv.values_id " + // 수정된 부분
            "WHERE ul.user_uid = ? " +
            "GROUP BY ul.user_uid";

  pstmt = conn.prepareStatement(selectQuery);
  pstmt.setString(1, userUID);

  resultSet = pstmt.executeQuery();

  // JSON 문자열 생성을 위한 StringBuilder
  StringBuilder jsonData = new StringBuilder("[");
  while (resultSet.next()) {
     String userName = resultSet.getString("user_name");
     String userHobbies = resultSet.getString("hobbies");
     String[] splitUserHobbies = userHobbies.split(",");
     String userBlood = resultSet.getString("user_blood");
     String userMBTI = resultSet.getString("user_mbti");
     String userReligion = resultSet.getString("user_religion");
     int userAlcohol = resultSet.getInt("user_alcohol");
     int userSmoking = resultSet.getInt("user_smoking");
     String userPersonality = resultSet.getString("personalities");
     String[] splitUserPersonality = userPersonality.split(",");
     String userMarriageValues = resultSet.getString("marriage_values");
     String[] splitUserMarriageValues = userMarriageValues.split(",");


     String alcoholString = (userAlcohol == 0) ? "비음주" : "음주";
     String smokingString = (userSmoking == 0) ? "비흡연" : "흡연";


     // JSON 배열에 해당 값을 추가
     jsonData.append("{\"x\": \"").append(userName).append("\", \"value\": 5},");
     for (String hobby : splitUserHobbies) {
     jsonData.append("{\"x\": \"").append(hobby).append("\", \"value\": 1},");    	 
     }
     jsonData.append("{\"x\": \"").append(userBlood).append(" 형\", \"value\": 1},");
     jsonData.append("{\"x\": \"").append(userMBTI).append("\", \"value\": 1},");
     jsonData.append("{\"x\": \"").append(userReligion).append("\", \"value\": 1},");
     jsonData.append("{\"x\": \"").append(alcoholString).append("\", \"value\": 2},");
     jsonData.append("{\"x\": \"").append(smokingString).append("\", \"value\": 2},");
     for (String personality : splitUserPersonality) {
     jsonData.append("{\"x\": \"").append(personality).append("\", \"value\": 3},");
     }
     for (String values : splitUserMarriageValues) {
     jsonData.append("{\"x\": \"").append(values).append("\", \"value\": 3},");
     }
 }



 // 마지막 쉼표 제거 후 JSON 배열 닫기
 if (jsonData.charAt(jsonData.length() - 1) == ',') {
     jsonData.deleteCharAt(jsonData.length() - 1);
 }
 jsonData.append("]");

 // 클라이언트로 JSON 형식의 데이터 출력
 response.setContentType("application/json");
 response.setCharacterEncoding("UTF-8");
 response.getWriter().write(jsonData.toString());

} catch (SQLException e) {
 e.printStackTrace();
} finally {
 // 리소스 닫기
 try {
     if (resultSet != null) resultSet.close();
     if (pstmt != null) pstmt.close();
     if (conn != null) conn.close();
 } catch (SQLException e) {
     e.printStackTrace();
 }
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
