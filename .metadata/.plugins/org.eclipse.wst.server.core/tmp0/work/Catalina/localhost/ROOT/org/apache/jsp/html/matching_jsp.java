/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-12-20 06:14:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.text.SimpleDateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;

public final class matching_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.time.Period");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../jsp/user_list_component.jsp", out, false);
      out.write('\r');
      out.write('\n');

String userUid = (String) request.getAttribute("userUid");
String userId = (String) request.getAttribute("userId");
String userPw = (String) request.getAttribute("userPw");
String userName = (String) request.getAttribute("userName");
String userGender = (String) request.getAttribute("userGender");
String userBirth = (String) request.getAttribute("userBirth");
String userPhone = (String) request.getAttribute("userPhone");
String userEmail = (String) request.getAttribute("userEmail");
String userCountry = (String) request.getAttribute("userCountry");
String userCareer = (String) request.getAttribute("userCareer");
String userEducation = (String) request.getAttribute("userEducation");
String userHeight = (String) request.getAttribute("userHeight");
String userBody = (String) request.getAttribute("userBody");
String userSalary = (String) request.getAttribute("userSalary");
String userMarital = (String) request.getAttribute("userMarital");
String userChildren = (String) request.getAttribute("userChildren");
String userChildrenCount = (String) request.getAttribute("userChildrenCount");
String userBlood = (String) request.getAttribute("userBlood");
String userMBTI = (String) request.getAttribute("userMBTI");
String userReligion = (String) request.getAttribute("userReligion");
String userAlcohol = (String) request.getAttribute("userAlcohol");
String userAlcoholCount = (String) request.getAttribute("userAlcoholCount");
String userSmoking = (String) request.getAttribute("userSmoking");
String userHobbies = (String) request.getAttribute("userHobbies");
String userPersonality = (String) request.getAttribute("userPersonality");
String userMarriageValues = (String) request.getAttribute("userMarriageValues");
String userIntroduce = (String) request.getAttribute("userIntroduce");
//String userPhotoURL = (String) request.getAttribute("userPhotoURL");
//String imageName = (String) request.getAttribute("imageName");

String genderString = (userGender != null && userGender.equals("0")) ? "남자" : "여자";
String maritalString = (userMarital != null && userMarital.equals("0")) ? "초혼" : "재혼";
String childrenString = (userChildren != null && userChildren.equals("0")) ? "자녀 무" : "자녀 유";
String alcoholString = (userAlcohol != null && userAlcohol.equals("0")) ? "비음주" : "음주";
String smokingString = (userSmoking != null && userSmoking.equals("0")) ? "비흡연" : "흡연";

      out.write('\r');
      out.write('\n');

String url = "jdbc:mysql://192.168.0.71:3306/recycle";
String user = "recycle";
String password = "1234";

      out.write("\r\n");
      out.write("\r\n");

try {
	Class.forName("com.mysql.cj.jdbc.Driver");
	Connection conn = DriverManager.getConnection(url, user, password);
	
	String userUID = (String) session.getAttribute("userUID");
	if (userUID == null) {
		out.println("<script>alert('로그인이 필요한 서비스입니다.');</script>");
		out.println("<script>location.href='../html/login.jsp';</script>");
	}
	
	String user_search = request.getParameter("user_search");
	String search = request.getParameter("search");

	List<String> userUidList = new ArrayList<>();

	String userGenderQuery = "SELECT * FROM user_list WHERE user_auth=1 AND user_gender=? ORDER BY RAND() LIMIT 7";
	try (PreparedStatement preparedStatement = conn.prepareStatement(userGenderQuery)) {
		preparedStatement.setString(1, userGender.equals("1") ? "0" : "1");
		try (ResultSet resultSet = preparedStatement.executeQuery()) {
	while (resultSet.next()) {
		String user_Uid = resultSet.getString("user_uid");
		//System.out.println(user_Uid);
		userUidList.add(user_Uid);
	}
		}
	}
	// List를 배열로 변환하는 경우
	String[] userUidArray = userUidList.toArray(new String[0]);

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<title>Dash매칭 | 마음을 다시 연결하는 결혼 정보 플랫폼 DASH</title>\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("<meta name=\"keyworeds\"\r\n");
      out.write("	content=\"결혼, wedding, 결혼정보업체, DASH, Re:Connect, 듀오, 가연,\" />\r\n");
      out.write("<meta name=\"description\"\r\n");
      out.write("	content=\"안녕하세요, 마음을 다시 연결하는 결혼 정보 플랫폼 DASH 입니다.\" />\r\n");
      out.write("<link rel=\"icon\" href=\"../images/favicon.png\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"module\" crossorigin src=\"../script/matching_script.js\"></script>\r\n");
      out.write("<link rel=\"modulepreload\" href=\"../script/matcing_script2.js\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../CSS/matching_style.css\">\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../CSS/reset.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../CSS/header_footer.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../CSS/sidebar_style.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- 헤더 -->\r\n");
      out.write("	<header>\r\n");
      out.write("		<div class=\"header\">\r\n");
      out.write("			<div class=\"air\"></div>\r\n");
      out.write("			<a href=\"../index.jsp\" id=\"logo\"> <img src=\"../images/logo.svg\"\r\n");
      out.write("				alt=\"로고\" />\r\n");
      out.write("			</a>\r\n");
      out.write("			<div class=\"login_menu\">\r\n");
      out.write("				<div id=\"loginStatus\"></div>\r\n");
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<nav class=\"nav\">\r\n");
      out.write("			<a href=\"../index.jsp\" id=\"logo2\"> <img src=\"../images/logo.svg\"\r\n");
      out.write("				alt=\"로고\" width=\"95\" />\r\n");
      out.write("			</a>\r\n");
      out.write("			<ul class=\"gnb\">\r\n");
      out.write("				<!-- <div id=\"test\"></div> -->\r\n");
      out.write("				<li class=\"gnb-menu\"><a href=\"#\" class=\"menu-btn\">회사소개</a>\r\n");
      out.write("					<ul class=\"sub-menu\">\r\n");
      out.write("						<li><a href=\"dash.jsp\">Dash란?</a></li>\r\n");
      out.write("						<li><a href=\"greeting.jsp\">인사말</a></li>\r\n");
      out.write("						<li><a href=\"manager.jsp\">커플 매니저 소개</a></li>\r\n");
      out.write("					</ul></li>\r\n");
      out.write("\r\n");
      out.write("				<li class=\"gnb-menu\"><a href=\"#\" class=\"menu-btn\">커뮤니티</a>\r\n");
      out.write("					<ul class=\"sub-menu\">\r\n");
      out.write("						<li><a href=\"notice.jsp\">공지사항</a></li>\r\n");
      out.write("						<li><a href=\"board_main.jsp\">문의하기</a></li>\r\n");
      out.write("						<li><a href=\"event.jsp\">이벤트</a></li>\r\n");
      out.write("						<li><a href=\"FAQ.jsp\">FAQ</a></li>\r\n");
      out.write("					</ul></li>\r\n");
      out.write("\r\n");
      out.write("				<li class=\"gnb-menu\"><a href=\"#\" class=\"menu-btn\">이용안내</a>\r\n");
      out.write("					<ul class=\"sub-menu\">\r\n");
      out.write("\r\n");
      out.write("						<li><a href=\"estimate.jsp\">상담예약</a></li>\r\n");
      out.write("						<li><a href=\"price.jsp\">이용요금</a></li>\r\n");
      out.write("					</ul></li>\r\n");
      out.write("\r\n");
      out.write("				<li class=\"gnb-menu\"><a href=\"#\" class=\"menu-btn\">후기정보</a>\r\n");
      out.write("					<ul class=\"sub-menu\">\r\n");
      out.write("						<li><a href=\"mgr_reviews.jsp\">매니저 후기</a></li>\r\n");
      out.write("						<li><a href=\"interview.jsp\">인터뷰</a></li>\r\n");
      out.write("					</ul></li>\r\n");
      out.write("\r\n");
      out.write("				<li class=\"gnb-menu\"><a href=\"#\" class=\"menu-btn\">매칭하기</a>\r\n");
      out.write("					<ul class=\"sub-menu\">\r\n");
      out.write("						<li><a href=\"matching.jsp\">Dash매칭</a></li>\r\n");
      out.write("						<li><a href=\"bestmember.jsp\">This Is Me</a></li>\r\n");
      out.write("					</ul></li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			<button class=\"nav-icon\">\r\n");
      out.write("				<iconify-icon icon=\"ph:list-fill\"></iconify-icon>\r\n");
      out.write("			</button>\r\n");
      out.write("\r\n");
      out.write("		</nav>\r\n");
      out.write("		<div class=\"dim-layer\"></div>\r\n");
      out.write("	</header>\r\n");
      out.write("\r\n");
      out.write("	<main>\r\n");
      out.write("		<nav class=\"side-bar\">\r\n");
      out.write("			<h2>매칭</h2>\r\n");
      out.write("			<ul class=\"sb-list\">\r\n");
      out.write("				<li><a href=\"matching.jsp\">Dash 매칭</a></li>\r\n");
      out.write("				<li><a href=\"bestmember.jsp\">This Is Me</a></li>\r\n");
      out.write("				<!-- <li><a href=\"#\">이용요금</a></li> -->\r\n");
      out.write("			</ul>\r\n");
      out.write("		</nav>\r\n");
      out.write("\r\n");
      out.write("		<div id=\"box\"></div>\r\n");
      out.write("\r\n");
      out.write("		<h2 id=\"title\">Dash 매칭</h2>\r\n");
      out.write("		<p id=\"sub-title\">가끔 만나요. 우리, 우연히</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<div id=\"app\">\r\n");
      out.write("			<!-- Carousel slider -->\r\n");
      out.write("			<div class=\"swiper\">\r\n");
      out.write("				<div class=\"swiper-wrapper\">\r\n");
      out.write("					");

					for (int i = 0; i <= 6; i++) {
					    String userMetchingQuery = "SELECT ul.*, ud.*, " + "GROUP_CONCAT(DISTINCT h.hobby_name) AS hobbies, "
					            + "GROUP_CONCAT(DISTINCT p.personality_name) AS personalities, "
					            + "GROUP_CONCAT(DISTINCT mv.values_name) AS marriage_values " + "FROM user_list ul "
					            + "LEFT JOIN user_detail ud ON ul.user_uid = ud.user_uid "
					            + "LEFT JOIN user_hobbies uh ON ul.user_uid = uh.user_id "
					            + "LEFT JOIN hobbies h ON uh.hobby_id = h.hobby_id "
					            + "LEFT JOIN user_personality up ON ul.user_uid = up.user_id "
					            + "LEFT JOIN personalities p ON up.personality_id = p.personality_id "
					            + "LEFT JOIN user_marriage_values umv ON ul.user_uid = umv.user_id "
					            + "LEFT JOIN marriage_values mv ON umv.values_id = mv.values_id " + "WHERE ul.user_uid = ? " + "GROUP BY ul.user_uid";
					    try (PreparedStatement preparedStatement = conn.prepareStatement(userMetchingQuery)) {
					        preparedStatement.setString(1, userUidArray[i]);
					        try (ResultSet resultSet = preparedStatement.executeQuery()) {
					            if (resultSet.next()) {
							String photo_url = resultSet.getString("photo_url");
							String imageName = (photo_url != null) ? new File(photo_url).getName() : "Default_image.JPG";
							String user_Uid = resultSet.getString("user_uid");
							String user_name = resultSet.getString("user_name");
							String user_country = resultSet.getString("user_country");
							String user_hobbies = resultSet.getString("hobbies");
							String user_personality = resultSet.getString("personalities");
							String user_mbti = resultSet.getString("user_MBTI");
							String user_introduce = resultSet.getString("user_introduce");

							String user_birth = resultSet.getString("user_birth");
							String birthDateStr = user_birth;
							LocalDate birthDate = LocalDate.parse(birthDateStr, DateTimeFormatter.ISO_DATE);
							LocalDate currentDate = LocalDate.now();
							Period period = Period.between(birthDate, currentDate);
							int userAge = period.getYears();
							

							userUidList.add(user_Uid);


							 String fromUserUid = userUid; // 여기에 현재 로그인한 사용자의 UID를 설정해야 합니다.
				                String toUserUid = user_Uid; // 현재 순회 중인 사용자의 UID
				                String likeCheckQuery = "SELECT * FROM `like` WHERE from_user = ? AND to_user = ?";
				                try (PreparedStatement likeCheckStatement = conn.prepareStatement(likeCheckQuery)) {
				                    likeCheckStatement.setString(1, fromUserUid);
				                    likeCheckStatement.setString(2, toUserUid);
				                    try (ResultSet likeCheckResult = likeCheckStatement.executeQuery()) {
				                        boolean alreadyLiked = likeCheckResult.next();
				
      out.write("\r\n");
      out.write("				                        <div class=\"swiper-slide\">\r\n");
      out.write("						<div class=\"flip-container\">\r\n");
      out.write("							<div class=\"flipper\">\r\n");
      out.write("								<div class=\"front\">\r\n");
      out.write("									<!-- 앞면에 보이는 내용 -->\r\n");
      out.write("									<div class=\"swiper-carousel-animate-opacity\">\r\n");
      out.write("										<img\r\n");
      out.write("											src=\"");
      out.print(request.getContextPath());
      out.write("/images/");
      out.print(imageName);
      out.write("\"\r\n");
      out.write("											alt=\"");
      out.print(user_name);
      out.write("\">\r\n");
      out.write("										<!-- <div class=\"slide-content\">\r\n");
      out.write("                      <h2>전두엽</h2>\r\n");
      out.write("                      <p>20대</p>\r\n");
      out.write("                    </div> -->\r\n");
      out.write("									</div>\r\n");
      out.write("								</div>\r\n");
      out.write("								<div class=\"back\">\r\n");
      out.write("									<!-- 뒷면에 보이는 내용 -->\r\n");
      out.write("									<h2>");
      out.print(user_name);
      out.write("</h2>\r\n");
      out.write("									<p>");
      out.print(userAge);
      out.write("세\r\n");
      out.write("									</p>\r\n");
      out.write("									<p>");
      out.print(user_country);
      out.write("</p>\r\n");
      out.write("									<p>\r\n");
      out.write("										관심사 :\r\n");
      out.write("										");
      out.print(user_hobbies);
      out.write("</p>\r\n");
      out.write("									<p>\r\n");
      out.write("										성격 :\r\n");
      out.write("										");
      out.print(user_personality);
      out.write("</p>\r\n");
      out.write("									<p>");
      out.print(user_mbti);
      out.write("</p>\r\n");
      out.write("									<p class=\"introduce\">");
      out.print(user_introduce);
      out.write("</p>\r\n");
      out.write("									<!-- 사용자가 입력한 정보를 보여줄 곳 -->\r\n");
      out.write("									<button onclick=\"openModal('modalId");
      out.print(user_Uid);
      out.write("')\"\r\n");
      out.write("										class=\"openModal\">상세정보</button>\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("						\r\n");
      out.write("						<form action=\"../jsp/likeSubmit.jsp\" method=\"post\">\r\n");
      out.write("							<div class=\"heart-container\" title=\"Like\">\r\n");
      out.write("								<input type=\"checkbox\" class=\"checkbox\" id=\"Give-It-An-Id\" value=\"");
      out.print(user_Uid);
      out.write("\" name=\"toUid\" ");
 if(alreadyLiked) out.print("checked"); 
      out.write(" >\r\n");
      out.write("								<div class=\"svg-container\">\r\n");
      out.write("									<svg viewBox=\"0 0 24 24\" class=\"svg-outline\"\r\n");
      out.write("										xmlns=\"http://www.w3.org/2000/svg\">\r\n");
      out.write("                  						<path\r\n");
      out.write("											d=\"M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Zm-3.585,18.4a2.973,2.973,0,0,1-3.83,0C4.947,16.006,2,11.87,2,8.967a4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,11,8.967a1,1,0,0,0,2,0,4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,22,8.967C22,11.87,19.053,16.006,13.915,20.313Z\">\r\n");
      out.write("                  						</path>\r\n");
      out.write("               						 </svg>\r\n");
      out.write("									<svg viewBox=\"0 0 24 24\" class=\"svg-filled\"\r\n");
      out.write("										xmlns=\"http://www.w3.org/2000/svg\">\r\n");
      out.write("                  						<path\r\n");
      out.write("											d=\"M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Z\">\r\n");
      out.write("                 						</path>\r\n");
      out.write("                					</svg>\r\n");
      out.write("									<svg class=\"svg-celebrate\" width=\"100\" height=\"100\"\r\n");
      out.write("										xmlns=\"http://www.w3.org/2000/svg\">\r\n");
      out.write("                  						<polygon points=\"10,10 20,20\"></polygon>\r\n");
      out.write("                  						<polygon points=\"10,50 20,50\"></polygon>\r\n");
      out.write("										<polygon points=\"20,80 30,70\"></polygon>\r\n");
      out.write("                  						<polygon points=\"90,10 80,20\"></polygon>\r\n");
      out.write("                	  					<polygon points=\"90,50 80,50\"></polygon>\r\n");
      out.write("            	      					<polygon points=\"80,80 70,70\"></polygon>\r\n");
      out.write("        	        				</svg>\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("							<button class=\"liekSubmit\" type=\"submit\">좋아요<br/> 보내기</button>\r\n");
      out.write("						</form>\r\n");
      out.write("						\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					");

                    }
                }
					} else {
					// Handle the case where no user is found for the given user UID
					System.out.println("No user found for user UID: " + userUidArray[i]);
					}
					}
					}
					}
					
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<!-- 버튼 -->\r\n");
      out.write("			<div class=\"swiper-button\">\r\n");
      out.write("				<div id=\"air2\"></div>\r\n");
      out.write("				<div>\r\n");
      out.write("					<div class=\"swiper-button-prev\"></div>\r\n");
      out.write("					<div class=\"swiper-button-next\"></div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<button id=\"show\">Reset</button>\r\n");
      out.write("			</div>\r\n");
      out.write("			<!-- 단추 -->\r\n");
      out.write("			<div class=\"swiper-pagination\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			");

			for (int i = 0; i <= 6; i++) {
				String userMetchingQuery = "SELECT ul.*, ud.*, " + "GROUP_CONCAT(DISTINCT h.hobby_name) AS hobbies, "
				+ "GROUP_CONCAT(DISTINCT p.personality_name) AS personalities, "
				+ "GROUP_CONCAT(DISTINCT mv.values_name) AS marriage_values " + "FROM user_list ul "
				+ "LEFT JOIN user_detail ud ON ul.user_uid = ud.user_uid "
				+ "LEFT JOIN user_hobbies uh ON ul.user_uid = uh.user_id "
				+ "LEFT JOIN hobbies h ON uh.hobby_id = h.hobby_id "
				+ "LEFT JOIN user_personality up ON ul.user_uid = up.user_id "
				+ "LEFT JOIN personalities p ON up.personality_id = p.personality_id "
				+ "LEFT JOIN user_marriage_values umv ON ul.user_uid = umv.user_id "
				+ "LEFT JOIN marriage_values mv ON umv.values_id = mv.values_id " + // 수정된 부분
				"WHERE ul.user_uid = ? " + "GROUP BY ul.user_uid";
				try (PreparedStatement preparedStatement = conn.prepareStatement(userMetchingQuery)) {
					//preparedStatement.setString(1, userGender.equals("0") ? "1" : userGender);
					preparedStatement.setString(1, userUidArray[i]);
					try (ResultSet resultSet = preparedStatement.executeQuery()) {
				// Check if there is a result row
				if (resultSet.next()) {
					String photo_url = resultSet.getString("photo_url");

					String user_Uid = resultSet.getString("user_uid");
					String user_name = resultSet.getString("user_name");
					String user_country = resultSet.getString("user_country");
					String user_hobbies = resultSet.getString("hobbies");
					String user_personality = resultSet.getString("personalities");
					String user_mbti = resultSet.getString("user_MBTI");
					String user_introduce = resultSet.getString("user_introduce");
					String user_height = resultSet.getString("user_height");
					String user_education = resultSet.getString("user_education");
					String user_career = resultSet.getString("user_career");
					String user_body = resultSet.getString("user_body");
					String user_blood = resultSet.getString("user_blood");

					String user_marital = resultSet.getString("user_marital");
					if (user_marital.equals("1")) {
						user_marital = "Yes";
					} else {
						user_marital = "No";
					}

					String user_children = resultSet.getString("user_children");
					if (user_children.equals("1")) {
						user_children = "Yes";
					} else {
						user_children = "No";
					}

					String user_alcohol = resultSet.getString("user_alcohol");
					if (user_alcohol.equals("1")) {
						user_alcohol = "Yes";
					} else {
						user_alcohol = "No";
					}

					String user_smoking = resultSet.getString("user_smoking");
					if (user_smoking.equals("1")) {
						user_smoking = "Yes";
					} else {
						user_smoking = "No";
					}

					String marriage_values = resultSet.getString("marriage_values");

					String user_salary = resultSet.getString("user_salary");
					if (user_salary.equals("-2000")) {
						user_salary = "2000만원 미만";
					} else if (user_salary.equals("-3000")) {
						user_salary = "2천만원 이상 - 3천만원 미만";
					} else if (user_salary.equals("-4000")) {
						user_salary = "3천만원 이상 - 4천만원 미만";
					} else if (user_salary.equals("-5000")) {
						user_salary = "4천만원 이상 - 5천만원 미만";
					} else if (user_salary.equals("-6000")) {
						user_salary = "5천만원 이상 - 6천만원 미만";
					} else if (user_salary.equals("-7000")) {
						user_salary = "6천만원 이상 - 7천만원 미만";
					} else if (user_salary.equals("-8000")) {
						user_salary = "7천만원 이상 - 8천만원 미만";
					} else if (user_salary.equals("-9000")) {
						user_salary = "8천만원 이상 - 9천만원 미만";
					} else if (user_salary.equals("-10000")) {
						user_salary = "9천만원 이상 - 1억 미만";
					} else if (user_salary.equals("-10000-20000")) {
						user_salary = "1억 이상 - 2억 미만";
					} else if (user_salary.equals("-20000-30000")) {
						user_salary = "2억 이상 - 3억 미만";
					} else if (user_salary.equals("-30000-40000")) {
						user_salary = "3억 이상 - 4억 미만";
					} else if (user_salary.equals("-40000-50000")) {
						user_salary = "4억 이상 - 5억 미만";
					} else if (user_salary.equals("50000-")) {
						user_salary = "5억 이상";
					}

					String user_birth = resultSet.getString("user_birth");
					String birthDateStr = userBirth;
					LocalDate birthDate = LocalDate.parse(birthDateStr, DateTimeFormatter.ISO_DATE);
					LocalDate currentDate = LocalDate.now();
					Period period = Period.between(birthDate, currentDate);
					int userAge = period.getYears();
			
      out.write("\r\n");
      out.write("			<div class=\"modal\" id=\"modalId");
      out.print(user_Uid);
      out.write("\">\r\n");
      out.write("				<div class=\"modal-content\">\r\n");
      out.write("\r\n");
      out.write("					<table class=\"info\">\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>이름</td>\r\n");
      out.write("							<td>");
      out.print(user_name);
      out.write("</td>\r\n");
      out.write("							<td>키</td>\r\n");
      out.write("							<td>");
      out.print(user_height);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>나이</td>\r\n");
      out.write("							<td>");
      out.print(userAge);
      out.write("</td>\r\n");
      out.write("							<td>학력</td>\r\n");
      out.write("							<td>");
      out.print(user_education);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>직업</td>\r\n");
      out.write("							<td>");
      out.print(user_career);
      out.write("</td>\r\n");
      out.write("							<td>연봉</td>\r\n");
      out.write("							<td>");
      out.print(user_salary);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>체형</td>\r\n");
      out.write("							<td>");
      out.print(user_body);
      out.write("</td>\r\n");
      out.write("							<td>혈액형</td>\r\n");
      out.write("							<td>");
      out.print(user_blood);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>결혼여부</td>\r\n");
      out.write("							<td>");
      out.print(user_marital);
      out.write("</td>\r\n");
      out.write("							<td>자녀여부</td>\r\n");
      out.write("							<td>");
      out.print(user_children);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>관심사</td>\r\n");
      out.write("							<td>");
      out.print(user_hobbies);
      out.write("</td>\r\n");
      out.write("							<td>성격</td>\r\n");
      out.write("							<td>");
      out.print(user_personality);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>음주</td>\r\n");
      out.write("							<td>");
      out.print(user_alcohol);
      out.write("</td>\r\n");
      out.write("							<td>흡연</td>\r\n");
      out.write("							<td>");
      out.print(user_smoking);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>결혼가치관</td>\r\n");
      out.write("							<td>");
      out.print(marriage_values);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("					</table>\r\n");
      out.write("					<span onclick=\"closeModal('modalId");
      out.print(user_Uid);
      out.write("')\" class=\"close\">&times;</span>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			} else {
			// Handle the case where no user is found for the given user UID
			System.out.println("No user found for user UID: " + userUidArray[i]);
			}
			}
			}
			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("			<!-- 리셋 -->\r\n");
      out.write("			<div class=\"background\">\r\n");
      out.write("				<div class=\"window\">\r\n");
      out.write("					<div class=\"popup\">\r\n");
      out.write("						<div class=\"reset-content\">\r\n");
      out.write("							<p>G등급 및 D등급은 매일 한번 Reset입니다.</p>\r\n");
      out.write("							<p>내일 다시 이용 바랍니다.</p>\r\n");
      out.write("							<br>\r\n");
      out.write("							<p>무제한 Reset을 이용하시려면</p>\r\n");
      out.write("							<p>\r\n");
      out.write("								A등급, S등급, H등급을 구매하시기 <br>바랍니다.\r\n");
      out.write("							</p>\r\n");
      out.write("						</div>\r\n");
      out.write("						<button id=\"close\">&times;</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("	</main>\r\n");
      out.write("\r\n");
      out.write("	<!-- 아래 footer 하단 고정 -->\r\n");
      out.write("	<footer class=\"footer\">\r\n");
      out.write("		<div class=\"footer-content\">\r\n");
      out.write("			<h3>(주)Re:connect</h3>\r\n");
      out.write("			<span>대표 : Recycle</span> <span>사업자등록번호 : 999-99-99999</span> <span>주소\r\n");
      out.write("				: (34838)대전광역시 중구 중앙로121번길 20 (선화동 41) 2층</span> <span>Tel.042-222-2402</span>\r\n");
      out.write("			<ul class=\"footer-socials\">\r\n");
      out.write("				<li><a href=\"index_logout.jsp\"><img\r\n");
      out.write("						src=\"../images/ico_image.svg\" alt=\"ico_image\" /></a> <!-- 임시로 로그아웃 넣어 놨음 -->\r\n");
      out.write("				</li>\r\n");
      out.write("				<li><a href=\"account_manager.jsp\"><img\r\n");
      out.write("						src=\"../images/ico_instagram.svg\" alt=\"ico_instagram\" /></a> <!-- 임시로 커플매니저페이지 넣어 놨음 -->\r\n");
      out.write("				</li>\r\n");
      out.write("				<li><a href=\"admin_manager_management.jsp\"><img\r\n");
      out.write("						src=\"../images/ico_youtube.svg\" alt=\"ico_youtube\" /></a> <!-- 임시로 관리자페이지 넣어 놨음 -->\r\n");
      out.write("				</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			<div class=\"footer-menu\">\r\n");
      out.write("				<p>\r\n");
      out.write("					copyright &copy;2023 by <a href=\"../index.jsp\">Re:connect.</a> All\r\n");
      out.write("					pictures cannot be copied without permission.\r\n");
      out.write("				</p>\r\n");
      out.write("				<ul class=\"f-menu\">\r\n");
      out.write("					<li><a href=\"../index.jsp\">Home</a></li>\r\n");
      out.write("					<li><a href=\"dash.jsp\">About</a></li>\r\n");
      out.write("					<li><a href=\"estimate.jsp\">Contact</a></li>\r\n");
      out.write("					<li><a href=\"FAQ.jsp\">FAQ</a></li>\r\n");
      out.write("				</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</footer>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- Cloudflare Pages Analytics -->\r\n");
      out.write("	<script>\r\n");
      out.write("		// ----------------userModal-------------------\r\n");
      out.write("\r\n");
      out.write("		// 모달 열기 함수\r\n");
      out.write("		function openModal(modalId) {\r\n");
      out.write("			var modal = document.getElementById(modalId);\r\n");
      out.write("			modal.style.display = \"block\";\r\n");
      out.write("		}\r\n");
      out.write("		// 수정모달\r\n");
      out.write("		function correctionModal(modalId) {\r\n");
      out.write("			var modal = document.getElementById(modalId);\r\n");
      out.write("			modal.style.display = \"block\";\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 모달 닫기 함수\r\n");
      out.write("		function closeModal(modalId) {\r\n");
      out.write("			var modal = document.getElementById(modalId);\r\n");
      out.write("			modal.style.display = \"none\";\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("			var form = document.querySelector('form');\r\n");
      out.write("			var checkbox = document.querySelector('.checkbox');\r\n");
      out.write("\r\n");
      out.write("			form.addEventListener('submit', function(event) {\r\n");
      out.write("				if (!checkbox.checked) {\r\n");
      out.write("					event.preventDefault(); // Prevent the form from submitting\r\n");
      out.write("					alert('하트를 눌러주세요');\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js\"></script>\r\n");
      out.write("	<script defer src='https://static.cloudflareinsights.com/beacon.min.js'\r\n");
      out.write("		data-cf-beacon='{\"token\": \"07e9b2efafbd4b458690b79234a62148\"}'></script>\r\n");
      out.write("	<!-- Cloudflare Pages Analytics -->\r\n");
      out.write("	<script src=\"../script/header_script.js\"></script>\r\n");
      out.write("	<script src=\"../script/loginSession2.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");

} catch (Exception e) {
out.println("Error: " + e.getMessage());
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
